provider "aws" {
  region = "us-east-1"
}

# Create IAM Role for Lambda Execution
resource "aws_iam_role" "lambda_execution_role" {
  name = "lambda-execution-S3toECR-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

# Attach Policies for Lambda to Access ECR
resource "aws_iam_role_policy" "lambda_ecr_policy" {
  name = "lambda-ecr-policy"
  role = aws_iam_role.lambda_execution_role.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "ecr:GetAuthorizationToken",
          "ecr:BatchCheckLayerAvailability",
          "ecr:BatchGetImage",
          "ecr:PutImage",
          "ecr:UploadLayerPart",
          "ecr:CompleteLayerUpload",
          "ecr:InitiateLayerUpload"
        ],
        Resource = "*"
      },
      {
        Effect = "Allow",
        Action = [
          "s3:GetObject",
          "s3:PutObject"
        ],
        Resource = "arn:aws:s3:::s386to98rds/*"
      }
    ]
  })
}

# Create the Lambda Function
resource "aws_lambda_function" "lambda_function" {
  function_name = "push-image-to-ecr"

  role          = aws_iam_role.lambda_execution_role.arn
  package_type  = "Zip" # Zip package for Lambda with Python/Node.js code
  filename      = "lambda_function.zip" # Ensure this file is created
  handler       = "lambda_function.lambda_handler"
  runtime       = "python3.9"

  environment {
    variables = {
      ECR_REPOSITORY_URI = "682033462110.dkr.ecr.us-east-1.amazonaws.com/data-pipeline"
      IMAGE_TAG          = "latest"
      S3_BUCKET          = "s386to98rds"
      RDS_DB             = "database-2"
    }
  }
}

# ECR Repository
resource "aws_ecr_repository" "data_pipeline_repo" {
  name = "data-pipeline"
}